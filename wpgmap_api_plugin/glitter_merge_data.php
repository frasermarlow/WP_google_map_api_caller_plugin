<?php// function to take a base for a WP Google Map import, and merge in a second $that came from our API call.function pre_me($v,$t=''){    echo "<h2>" . $t . "</h2><br/>\n";    echo "<pre>";    print_r($v);    echo "</pre>";}class Pin {    public ?string $id;    public ?string $map_id;    public ?string $address;    public ?string $description = "";    public ?string $pic = "";    public ?string $link;    public ?string $lat;    public ?string $lng;    public ?string $icon = ""; // http://staging-getglitterapp.kinsta.cloud/wp-content/uploads/2022/04/glitter_pin_1.png    public ?string $anim = "2";    public ?string $title = "";    public ?string $infoopen = "0";    public ?string $category;    public ?string $approved = "1";    public ?string $retina = "0";    public ?string $type = "0";    public ?string $did = "";    public ?string $sticky = "0";    public ?string $other_data = "";    }function glitter_merge_data($base_array, $api_call_data) {    $account_count = 0;    $accounts = array();        // iterate through the API call pages and aggregate the 'accounts' objects into an array    foreach($api_call_data as $page){              foreach($page->accounts as $account_obj){        array_push($accounts,$account_obj);        }    }    $base_array['markers'] = array();        // Pull all categories together into an array    $cats = array();    foreach($base_array['categories'] as $c){        $cats[$c['category_name']]=$c['id'];    }        add_option('map_block_count'); # note, this will only have effect the very first time you install the plugin.    $block_count = 0;    $id = 0;    $pin_array = array();  // Will be an $of objects, each object a pin.        $test_array = array();  // useful for testing        $api_endpoint_string_length = strlen(get_option('glitter_map_api_endpoint'). get_option('glitter_map_api_resource'));           foreach($accounts as $account){        $pin = new Pin();        $customFields = new GlitterMapObject();        $custom_field_endpoint = get_option('glitter_map_api_resource') . substr($account->links->accountCustomFieldData,$api_endpoint_string_length);        $customFieldList = $customFields->call_api($custom_field_endpoint,false)[0];        foreach($customFieldList->customerAccountCustomFieldData as $customField){                    $pin->map_id = $base_array['maps'][0]['id'];            if(isset($customField->custom_field_id) & $customField->custom_field_id=="18"){                    $pin->title = $customField->custom_field_text_value;                    // $pin->description = $customField->custom_field_text_value;                    $pin->other_data .= $customField->customer_account_id;            }            if(isset($customField->custom_field_id) & $customField->custom_field_id=="23"){                    $pin->link = $customField->custom_field_text_value;            }            if(isset($customField->custom_field_id) & $customField->custom_field_id=="32"){                    $pin->category = $cats[$customField->custom_field_text_value];                    $pin->description = "Frequency: " . $customField->custom_field_text_value . ".<br/>&nbsp;";            }                        // Leaving out this next block for now as it duplicates the 'title'            /* if(isset($customField->custom_field_id) & $customField->custom_field_id=="18"){                    $pin->address = $customField->custom_field_text_value;            } */        }                foreach($customFieldList->customerAccountCustomFieldData as $customField){                if(isset($customField->custom_field_id) & $customField->custom_field_id=="33"){                $geocodes = explode("\n", $customField->custom_field_text_blob);                foreach($geocodes as $code){                    $pin->lat = str_replace(",", "", explode(" ",$code)[0] );                    $pin->lng = str_replace(",", "", explode(" ",$code)[1] );                    $pin->id = $id++;                    $pin->other_data .= $id;                                        if(!isset($pin->category)){                        $pin->category = $cats['unfunded'];                        $pin->description = "This block is not yet fully funded.<br/>&nbsp;";                        }                                        $temp_pin = clone $pin;                    array_push($pin_array,$temp_pin);                }            }        }       }        foreach($pin_array as $pin) {    $a = (array) $pin;    array_push($base_array['markers'],$a);    }    update_option('map_block_count', count($pin_array));    return array_merge($test_array, $base_array);}/* Add shortcode for intro text before the map */function render_glitter_map_intro_text(){    $update_date = explode(" ",get_option('map_last_updated_at'));	$output = "<h4>";    $output .= "Glitter currently maintains <strong>" . get_option('map_block_count') . "</strong> blocks and commercial corridors on a regular basis:<br/>";    $output .= "<img class='alignnone size-full wp-image-1899' src='https://getglitterapp.com/wp-content/uploads/2022/04/glitter_pin_1.png' alt='' width='33' />: Serviced blocks&nbsp;|&nbsp;";	$output .= "<img class='wpgmza-category-marker-icon' data-marker-icon-src='{&quot;url&quot;:&quot;\/\/getglitterapp.com\/wp-content\/uploads\/2022\/05\/glitter_unfunded_pin.png&quot;,&quot;retina&quot;:0}' src='//getglitterapp.com/wp-content/uploads/2022/05/glitter_unfunded_pin.png' width='33'>: Needs funding<br/>\n";	$output .= "Click on a marker to help sponsor an existing block or click 'Contribute' to launch funding of a new block.";    $output .= "</h4>";    $output .= "<p>Map last updated on " . $update_date[0] . " " . $update_date[1] . " " . $update_date[2] . "</p>" ;    	echo $output;}function register_glitter_shortcodes(){	 add_shortcode('glitter-map-intro-text', 'render_glitter_map_intro_text');}add_action( 'init', 'register_glitter_shortcodes');?>